#
# 
# AWS Elastic Container Service stack
# @description uses AWS Fargate which is a compute engine for Amazon ECS that allows you to run containers without having to manage servers or clusters.
# 
# @params {string} EnvironmentName - Environment Name 
# 
#
AWSTemplateFormatVersion: "2010-09-09"
Description: Elastic Container Service for SCA Developer Test

#
# Paramaters
# @description Read from the ECS parameters json (ecs.params.json) to set variables dynamically
# 
# @param {string} EnvironmentName - name of the environment 
# @usage !Ref EnvironmentName
# 
Parameters:
  EnvironmentName:
    Default: staging 
    Description: Name of the environment this cloudformation stack belongs to
    Type: String

#
# Resources
# @description Auto create a resource of type Elastic Container Service 
#
Resources:

  # 
  # @name WebListenerRule
  # @description WebListenerRule for ECS (AWS::ElasticLoadBalancingV2::ListenerRule)
  # @param {string} $ref - yaml reference, we call it: "WebListenerRule" 
  # @param {string} EnvironmentName - environment name 
  # @import SCADeveloperTestLoadBalancerListener - exported Reference from loadbalancer.yml
  # @import WebTargetGroup - Target Group from below 
  #
  WebListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn:
          Fn::ImportValue: !Sub ${EnvironmentName}:SCADeveloperTestLoadBalancerListener
        Priority: 100
        Conditions:
          - Field: path-pattern
            Values:
              - /*
        Actions:
          - TargetGroupArn: !Ref WebTargetGroup
            Type: forward

  # 
  # @name WebTargetGroup
  # @description WebTargetGroup for ECS (AWS::ElasticLoadBalancingV2::TargetGroup)
  # @param {string} $ref - yaml reference, we call it: "WebTargetGroup" 
  # @param {string} EnvironmentName - environment name 
  #
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: "60"

  # 
  # @name SCADeveloperTestECSCluster
  # @description ECS Cluster 
  # @param {string} $ref - yaml reference, we call it: "SCADeveloperTestECSCluster" 
  # @param {string} EnvironmentName - environment name 
  #
  SCADeveloperTestECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: SCADeveloperTestECSCluster

  # 
  # @name SCADeveloperTestECSService
  # @description ECS Service with Fargate. AWS Fargate which is a compute engine for Amazon ECS that allows you to run containers without having to manage servers or clusters. 
  # @param {string} $ref - yaml reference, we call it: "SCADeveloperTestECSService" 
  # @param {string} EnvironmentName - environment name 
  # @import WebTargetGroup - Target Group from below 
  # @import ContainerSecurityGroup - Container Security Group 
  # @import SubnetAZ1Private/SubnetAZ2Private - subnets for the VPC 
  #
  SCADeveloperTestECSService:
    Type: AWS::ECS::Service
    DependsOn: WebListenerRule
    Properties:
      Cluster: !Ref SCADeveloperTestECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: SCADeveloperTest
          ContainerPort: 8080
          TargetGroupArn: !Ref WebTargetGroup

      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
          - Fn::ImportValue: !Sub ${EnvironmentName}:SubnetAZ1Private
          - Fn::ImportValue: !Sub ${EnvironmentName}:SubnetAZ2Private
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      ServiceName: !Sub sca-developertest-${EnvironmentName}
      TaskDefinition: !Ref SCADeveloperTestTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  # 
  # @name SCADeveloperTestECSService
  # @description Container security group for ecs containers
  # @param {string} $ref - yaml reference, we call it: "ContainerSecurityGroup" 
  #        
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join [ ":", [ !Ref EnvironmentName, "VPC" ]]
      GroupDescription: Container security group for ecs containers
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  # 
  # @name ECSTaskRole
  # @description IAM Role for ECS Task 
  # @param {string} $ref - yaml reference, we call it: "ECSTaskRole" 
  # 
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: SCADeveloperTestAmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  # 
  # @name CloudWatchLogsGroup
  # @description Cloud Watch Logs 
  # @param {string} $ref - yaml reference, we call it: "ECSTaskRole" 
  # @param {string} LogGroupName - Group name for Cloud Watch 
  # 
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /sca/developertest
      RetentionInDays: 7

  # 
  # @name SCADeveloperTestTaskDefinition
  # @description  Task Definition
  #               To prepare your application to run on Amazon ECS, you create a task definition. The task definition is a text file, in JSON format, that describes one or more containers, up to a maximum of ten, that form your application. It can be thought of as a blueprint for your application.
  # @param {string} $ref - yaml reference, we call it: "SCADeveloperTestTaskDefinition" 
  # @import ECSTaskRole - IAM Role from above 
  # @import CloudWatchLogsGroup - Cloud watch Logs
  # 
  SCADeveloperTestTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !Ref ECSTaskRole
      Family: sca-developertest
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -
          Name: SCADeveloperTest
          Image: sca/developertest
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: sca-developertest        

